<?xml version="1.0" encoding="UTF-8" ?>

<!--  mybatis 의 sql 쿼리문을 사용하기 위한 파일 선언 -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  자바 인터페이스(mapper) 와 연동 설정 -->
<!--  mapper : 자바 인터페이스 중 @Mapper 어노테이션이 사용된 인터페이스와 연동하는 태그 -->
<!--    mapper 태그 안에 select, insert, update, delete 태그를 추가하여 sql 쿼리를 작성 -->
<!--  namespace : 자바 인터페이스의 패키지명과 이름을 모두 입력하여 현재 xml 파일과 연동 -->
<!--  xml 파일은 현재 프로젝트의 내부 구조를 모르게 때문에 패키지명을 모두 다 입력해야 함 -->
<mapper namespace="bitc.full502.board1.mapper.BoardMapper">

<!--  실제 sql 쿼리문 입력 -->
<!--  연동된 인터페이스에서 제공하는 메소드명과 동일한 id 속성명을 가지는 태그를 생성 -->
<!--  태그는 select, insert, update, delete 를 사용 -->
<!--  해당 태그의 속성은 id, resultType, parameterType 을 주로 사용함 -->

<!--  id : 연동된 인터페이스에서 제공하는 메소드명과 동일하게 입력 -->
<!--      xml은 메소드 오버로딩 개념이 없기 때문에 다른 태그의 id과 같은 이름을 사용할 수 없음 -->

<!--  resultType : select 쿼리문 사용 후 반환되는 결과를 저장하는 타입 지정 -->
<!--      자바 클래스로 설정, 자바의 기본 데이터 타입은 그대로 사용 가능 -->
<!--      사용자가 생성한 DTO 클래스 타입인 경우 패키지명까지 모두 입력-->

<!--  parameterType : 해당 태그를 실행 시 필요한 매개변수의 데이터 타입 -->
<!--      매개변수가 1개일 경우 해당 데이터 타입을 그대로 사용 -->
<!--      매개변수가 2개 이면 HashMap 타입을 사용 -->
<!--      매개변수가 3개 이상이면 DTO 클래스를 생성하여 DTO 클래스 타입의 패키지명과 함께 사용 -->
  <select id="selectBoardList" resultType="bitc.full502.board1.dto.BoardDTO">
    SELECT board_idx, title, create_id, create_date, hit_cnt
    FROM t_board
    WHERE deleted_yn = 'N'
  </select>
</mapper>
